// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2014 02:09:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    alu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alu_vlg_sample_tst(
	A0,
	A1,
	A2,
	A3,
	B0,
	B1,
	B2,
	B3,
	S0,
	S1,
	sampler_tx
);
input  A0;
input  A1;
input  A2;
input  A3;
input  B0;
input  B1;
input  B2;
input  B3;
input  S0;
input  S1;
output sampler_tx;

reg sample;
time current_time;
always @(A0 or A1 or A2 or A3 or B0 or B1 or B2 or B3 or S0 or S1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module alu_vlg_check_tst (
	Cout,
	OVR,
	R0,
	R1,
	R2,
	R3,
	sampler_rx
);
input  Cout;
input  OVR;
input  R0;
input  R1;
input  R2;
input  R3;
input sampler_rx;

reg  Cout_expected;
reg  OVR_expected;
reg  R0_expected;
reg  R1_expected;
reg  R2_expected;
reg  R3_expected;

reg  Cout_prev;
reg  OVR_prev;
reg  R0_prev;
reg  R1_prev;
reg  R2_prev;
reg  R3_prev;

reg  Cout_expected_prev;
reg  OVR_expected_prev;
reg  R0_expected_prev;
reg  R1_expected_prev;
reg  R2_expected_prev;
reg  R3_expected_prev;

reg  last_Cout_exp;
reg  last_OVR_exp;
reg  last_R0_exp;
reg  last_R1_exp;
reg  last_R2_exp;
reg  last_R3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	Cout_prev = Cout;
	OVR_prev = OVR;
	R0_prev = R0;
	R1_prev = R1;
	R2_prev = R2;
	R3_prev = R3;
end

// update expected /o prevs

always @(trigger)
begin
	Cout_expected_prev = Cout_expected;
	OVR_expected_prev = OVR_expected;
	R0_expected_prev = R0_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	R3_expected_prev = R3_expected;
end



// expected Cout
initial
begin
	Cout_expected = 1'bX;
	Cout_expected = #999000 1'b0;
	Cout_expected = #1000 1'bX;
end 

// expected OVR
initial
begin
	OVR_expected = 1'bX;
	OVR_expected = #999000 1'b0;
	OVR_expected = #1000 1'bX;
end 

// expected R0
initial
begin
	R0_expected = 1'bX;
	R0_expected = #999000 1'b0;
	R0_expected = #1000 1'bX;
end 

// expected R1
initial
begin
	R1_expected = 1'bX;
	R1_expected = #999000 1'b0;
	R1_expected = #1000 1'bX;
end 

// expected R2
initial
begin
	R2_expected = 1'bX;
	R2_expected = #999000 1'b0;
	R2_expected = #1000 1'bX;
end 

// expected R3
initial
begin
	R3_expected = 1'bX;
	R3_expected = #999000 1'b0;
	R3_expected = #1000 1'bX;
end 
// generate trigger
always @(Cout_expected or Cout or OVR_expected or OVR or R0_expected or R0 or R1_expected or R1 or R2_expected or R2 or R3_expected or R3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Cout = %b | expected OVR = %b | expected R0 = %b | expected R1 = %b | expected R2 = %b | expected R3 = %b | ",Cout_expected_prev,OVR_expected_prev,R0_expected_prev,R1_expected_prev,R2_expected_prev,R3_expected_prev);
	$display("| real Cout = %b | real OVR = %b | real R0 = %b | real R1 = %b | real R2 = %b | real R3 = %b | ",Cout_prev,OVR_prev,R0_prev,R1_prev,R2_prev,R3_prev);
`endif
	if (
		( Cout_expected_prev !== 1'bx ) && ( Cout_prev !== Cout_expected_prev )
		&& ((Cout_expected_prev !== last_Cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cout_expected_prev);
		$display ("     Real value = %b", Cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cout_exp = Cout_expected_prev;
	end
	if (
		( OVR_expected_prev !== 1'bx ) && ( OVR_prev !== OVR_expected_prev )
		&& ((OVR_expected_prev !== last_OVR_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OVR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OVR_expected_prev);
		$display ("     Real value = %b", OVR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OVR_exp = OVR_expected_prev;
	end
	if (
		( R0_expected_prev !== 1'bx ) && ( R0_prev !== R0_expected_prev )
		&& ((R0_expected_prev !== last_R0_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp = R0_expected_prev;
	end
	if (
		( R1_expected_prev !== 1'bx ) && ( R1_prev !== R1_expected_prev )
		&& ((R1_expected_prev !== last_R1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp = R1_expected_prev;
	end
	if (
		( R2_expected_prev !== 1'bx ) && ( R2_prev !== R2_expected_prev )
		&& ((R2_expected_prev !== last_R2_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp = R2_expected_prev;
	end
	if (
		( R3_expected_prev !== 1'bx ) && ( R3_prev !== R3_expected_prev )
		&& ((R3_expected_prev !== last_R3_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp = R3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module alu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
reg B0;
reg B1;
reg B2;
reg B3;
reg S0;
reg S1;
// wires                                               
wire Cout;
wire OVR;
wire R0;
wire R1;
wire R2;
wire R3;

wire sampler;                             

// assign statements (if any)                          
alu i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.Cout(Cout),
	.OVR(OVR),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.S0(S0),
	.S1(S1)
);

// A0
initial
begin
	A0 = 1'b0;
	A0 = #150000 1'b1;
	A0 = #50000 1'b0;
	A0 = #150000 1'b1;
	A0 = #50000 1'bX;
	A0 = #50000 1'b0;
	A0 = #150000 1'b1;
	A0 = #50000 1'b0;
	A0 = #150000 1'b1;
	A0 = #50000 1'bX;
	A0 = #50000 1'b0;
	A0 = #150000 1'b1;
	A0 = #50000 1'b0;
	A0 = #150000 1'b1;
	A0 = #50000 1'bX;
	A0 = #50000 1'b0;
	A0 = #150000 1'b1;
	A0 = #50000 1'b0;
	A0 = #150000 1'b1;
	A0 = #50000 1'b0;
end 

// A1
initial
begin
	A1 = 1'b1;
	A1 = #150000 1'b0;
	A1 = #100000 1'b1;
	A1 = #100000 1'b0;
	A1 = #50000 1'bX;
	A1 = #50000 1'b1;
	A1 = #150000 1'b0;
	A1 = #100000 1'b1;
	A1 = #100000 1'b0;
	A1 = #50000 1'bX;
	A1 = #50000 1'b1;
	A1 = #150000 1'b0;
	A1 = #100000 1'b1;
	A1 = #100000 1'b0;
	A1 = #50000 1'bX;
	A1 = #50000 1'b1;
	A1 = #150000 1'b0;
	A1 = #100000 1'b1;
	A1 = #100000 1'b0;
end 

// A2
initial
begin
	A2 = 1'b1;
	A2 = #100000 1'b0;
	A2 = #50000 1'b1;
	A2 = #100000 1'b0;
	A2 = #50000 1'b1;
	A2 = #50000 1'b0;
	A2 = #50000 1'bX;
	A2 = #50000 1'b1;
	A2 = #100000 1'b0;
	A2 = #50000 1'b1;
	A2 = #100000 1'b0;
	A2 = #50000 1'b1;
	A2 = #50000 1'b0;
	A2 = #50000 1'bX;
	A2 = #50000 1'b1;
	A2 = #100000 1'b0;
	A2 = #50000 1'b1;
	A2 = #100000 1'b0;
	A2 = #50000 1'b1;
	A2 = #50000 1'b0;
	A2 = #50000 1'bX;
	A2 = #50000 1'b1;
	A2 = #100000 1'b0;
	A2 = #50000 1'b1;
	A2 = #100000 1'b0;
	A2 = #50000 1'b1;
	A2 = #50000 1'b0;
end 

// A3
initial
begin
	A3 = 1'b0;
	A3 = #150000 1'b1;
	A3 = #150000 1'b0;
	A3 = #50000 1'b1;
	A3 = #50000 1'bX;
	A3 = #50000 1'b0;
	A3 = #150000 1'b1;
	A3 = #150000 1'b0;
	A3 = #50000 1'b1;
	A3 = #50000 1'bX;
	A3 = #50000 1'b0;
	A3 = #150000 1'b1;
	A3 = #150000 1'b0;
	A3 = #50000 1'b1;
	A3 = #50000 1'bX;
	A3 = #50000 1'b0;
	A3 = #150000 1'b1;
	A3 = #150000 1'b0;
	A3 = #50000 1'b1;
	A3 = #50000 1'b0;
end 

// B0
initial
begin
	B0 = 1'b1;
	B0 = #50000 1'b0;
	B0 = #50000 1'b1;
	B0 = #150000 1'b0;
	B0 = #50000 1'b1;
	B0 = #100000 1'bX;
	B0 = #50000 1'b1;
	B0 = #50000 1'b0;
	B0 = #50000 1'b1;
	B0 = #150000 1'b0;
	B0 = #50000 1'b1;
	B0 = #100000 1'bX;
	B0 = #50000 1'b1;
	B0 = #50000 1'b0;
	B0 = #50000 1'b1;
	B0 = #150000 1'b0;
	B0 = #50000 1'b1;
	B0 = #100000 1'bX;
	B0 = #50000 1'b1;
	B0 = #50000 1'b0;
	B0 = #50000 1'b1;
	B0 = #150000 1'b0;
	B0 = #50000 1'b1;
	B0 = #100000 1'b0;
end 

// B1
initial
begin
	B1 = 1'b0;
	B1 = #50000 1'b1;
	B1 = #50000 1'b0;
	B1 = #50000 1'b1;
	B1 = #50000 1'b0;
	B1 = #50000 1'b1;
	B1 = #150000 1'bX;
	B1 = #50000 1'b0;
	B1 = #50000 1'b1;
	B1 = #50000 1'b0;
	B1 = #50000 1'b1;
	B1 = #50000 1'b0;
	B1 = #50000 1'b1;
	B1 = #150000 1'bX;
	B1 = #50000 1'b0;
	B1 = #50000 1'b1;
	B1 = #50000 1'b0;
	B1 = #50000 1'b1;
	B1 = #50000 1'b0;
	B1 = #50000 1'b1;
	B1 = #150000 1'bX;
	B1 = #50000 1'b0;
	B1 = #50000 1'b1;
	B1 = #50000 1'b0;
	B1 = #50000 1'b1;
	B1 = #50000 1'b0;
	B1 = #50000 1'b1;
	B1 = #150000 1'b0;
end 

// B2
initial
begin
	B2 = 1'b0;
	B2 = #150000 1'b1;
	B2 = #50000 1'b0;
	B2 = #50000 1'b1;
	B2 = #150000 1'bX;
	B2 = #50000 1'b0;
	B2 = #150000 1'b1;
	B2 = #50000 1'b0;
	B2 = #50000 1'b1;
	B2 = #150000 1'bX;
	B2 = #50000 1'b0;
	B2 = #150000 1'b1;
	B2 = #50000 1'b0;
	B2 = #50000 1'b1;
	B2 = #150000 1'bX;
	B2 = #50000 1'b0;
	B2 = #150000 1'b1;
	B2 = #50000 1'b0;
	B2 = #50000 1'b1;
	B2 = #150000 1'b0;
end 

// B3
initial
begin
	B3 = 1'b0;
	B3 = #100000 1'b1;
	B3 = #300000 1'bX;
	B3 = #50000 1'b0;
	B3 = #100000 1'b1;
	B3 = #300000 1'bX;
	B3 = #50000 1'b0;
	B3 = #100000 1'b1;
	B3 = #300000 1'bX;
	B3 = #50000 1'b0;
	B3 = #100000 1'b1;
	B3 = #300000 1'b0;
end 

// S1
initial
begin
	S1 = 1'b0;
	S1 = #400000 1'bX;
	S1 = #50000 1'b0;
	S1 = #400000 1'bX;
	S1 = #50000 1'b1;
	S1 = #400000 1'bX;
	S1 = #50000 1'b1;
	S1 = #400000 1'b0;
end 

// S0
initial
begin
	S0 = 1'b0;
	S0 = #400000 1'bX;
	S0 = #50000 1'b1;
	S0 = #400000 1'bX;
	S0 = #50000 1'b0;
	S0 = #400000 1'bX;
	S0 = #50000 1'b1;
	S0 = #400000 1'b0;
end 

alu_vlg_sample_tst tb_sample (
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.S0(S0),
	.S1(S1),
	.sampler_tx(sampler)
);

alu_vlg_check_tst tb_out(
	.Cout(Cout),
	.OVR(OVR),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.sampler_rx(sampler)
);
endmodule

