// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/24/2014 01:13:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Accumulator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Accumulator_vlg_sample_tst(
	ALU/MDR,
	ALU0,
	ALU1,
	ALU2,
	ALU3,
	ClearACC,
	IncAcc,
	LoadAcc,
	MDR0,
	MDR1,
	MDR2,
	MDR3,
	sampler_tx
);
input  ALU/MDR;
input  ALU0;
input  ALU1;
input  ALU2;
input  ALU3;
input  ClearACC;
input  IncAcc;
input  LoadAcc;
input  MDR0;
input  MDR1;
input  MDR2;
input  MDR3;
output sampler_tx;

reg sample;
time current_time;
always @(ALU/MDR or ALU0 or ALU1 or ALU2 or ALU3 or ClearACC or IncAcc or LoadAcc or MDR0 or MDR1 or MDR2 or MDR3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Accumulator_vlg_check_tst (
	ACout0,
	ACout1,
	Acout2,
	Acout3,
	sampler_rx
);
input  ACout0;
input  ACout1;
input  Acout2;
input  Acout3;
input sampler_rx;

reg  ACout0_expected;
reg  ACout1_expected;
reg  Acout2_expected;
reg  Acout3_expected;

reg  ACout0_prev;
reg  ACout1_prev;
reg  Acout2_prev;
reg  Acout3_prev;

reg  ACout0_expected_prev;
reg  ACout1_expected_prev;
reg  Acout2_expected_prev;
reg  Acout3_expected_prev;

reg  last_ACout0_exp;
reg  last_ACout1_exp;
reg  last_Acout2_exp;
reg  last_Acout3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	ACout0_prev = ACout0;
	ACout1_prev = ACout1;
	Acout2_prev = Acout2;
	Acout3_prev = Acout3;
end

// update expected /o prevs

always @(trigger)
begin
	ACout0_expected_prev = ACout0_expected;
	ACout1_expected_prev = ACout1_expected;
	Acout2_expected_prev = Acout2_expected;
	Acout3_expected_prev = Acout3_expected;
end



// expected ACout0
initial
begin
	ACout0_expected = 1'bX;
end 

// expected ACout1
initial
begin
	ACout1_expected = 1'bX;
end 

// expected Acout2
initial
begin
	Acout2_expected = 1'bX;
end 

// expected Acout3
initial
begin
	Acout3_expected = 1'bX;
end 
// generate trigger
always @(ACout0_expected or ACout0 or ACout1_expected or ACout1 or Acout2_expected or Acout2 or Acout3_expected or Acout3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ACout0 = %b | expected ACout1 = %b | expected Acout2 = %b | expected Acout3 = %b | ",ACout0_expected_prev,ACout1_expected_prev,Acout2_expected_prev,Acout3_expected_prev);
	$display("| real ACout0 = %b | real ACout1 = %b | real Acout2 = %b | real Acout3 = %b | ",ACout0_prev,ACout1_prev,Acout2_prev,Acout3_prev);
`endif
	if (
		( ACout0_expected_prev !== 1'bx ) && ( ACout0_prev !== ACout0_expected_prev )
		&& ((ACout0_expected_prev !== last_ACout0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACout0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACout0_expected_prev);
		$display ("     Real value = %b", ACout0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACout0_exp = ACout0_expected_prev;
	end
	if (
		( ACout1_expected_prev !== 1'bx ) && ( ACout1_prev !== ACout1_expected_prev )
		&& ((ACout1_expected_prev !== last_ACout1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACout1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACout1_expected_prev);
		$display ("     Real value = %b", ACout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ACout1_exp = ACout1_expected_prev;
	end
	if (
		( Acout2_expected_prev !== 1'bx ) && ( Acout2_prev !== Acout2_expected_prev )
		&& ((Acout2_expected_prev !== last_Acout2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acout2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acout2_expected_prev);
		$display ("     Real value = %b", Acout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Acout2_exp = Acout2_expected_prev;
	end
	if (
		( Acout3_expected_prev !== 1'bx ) && ( Acout3_prev !== Acout3_expected_prev )
		&& ((Acout3_expected_prev !== last_Acout3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acout3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acout3_expected_prev);
		$display ("     Real value = %b", Acout3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Acout3_exp = Acout3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Accumulator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ALU/MDR;
reg ALU0;
reg ALU1;
reg ALU2;
reg ALU3;
reg ClearACC;
reg IncAcc;
reg LoadAcc;
reg MDR0;
reg MDR1;
reg MDR2;
reg MDR3;
// wires                                               
wire ACout0;
wire ACout1;
wire Acout2;
wire Acout3;

wire sampler;                             

// assign statements (if any)                          
Accumulator i1 (
// port map - connection between master ports and signals/registers   
	.ACout0(ACout0),
	.ACout1(ACout1),
	.Acout2(Acout2),
	.Acout3(Acout3),
	.\ALU/MDR (ALU/MDR),
	.ALU0(ALU0),
	.ALU1(ALU1),
	.ALU2(ALU2),
	.ALU3(ALU3),
	.ClearACC(ClearACC),
	.IncAcc(IncAcc),
	.LoadAcc(LoadAcc),
	.MDR0(MDR0),
	.MDR1(MDR1),
	.MDR2(MDR2),
	.MDR3(MDR3)
);

// ALU/MDR
initial
begin
	ALU/MDR = 1'b0;
end 

// ALU0
initial
begin
	ALU0 = 1'b1;
	ALU0 = #160000 1'b0;
end 

// ALU1
initial
begin
	ALU1 = 1'b1;
	ALU1 = #160000 1'b0;
end 

// ALU2
initial
begin
	ALU2 = 1'b1;
	ALU2 = #160000 1'b0;
end 

// ALU3
initial
begin
	ALU3 = 1'b1;
	ALU3 = #160000 1'b0;
end 

// ClearACC
initial
begin
	ClearACC = 1'b0;
	ClearACC = #50000 1'b1;
	ClearACC = #30000 1'b0;
end 

// IncAcc
initial
begin
	IncAcc = 1'b0;
	IncAcc = #90000 1'b1;
	IncAcc = #30000 1'b0;
	IncAcc = #30000 1'b1;
	IncAcc = #20000 1'b0;
end 

// LoadAcc
initial
begin
	LoadAcc = 1'b0;
	LoadAcc = #10000 1'b1;
	LoadAcc = #40000 1'b0;
end 

Accumulator_vlg_sample_tst tb_sample (
	.ALU/MDR(ALU/MDR),
	.ALU0(ALU0),
	.ALU1(ALU1),
	.ALU2(ALU2),
	.ALU3(ALU3),
	.ClearACC(ClearACC),
	.IncAcc(IncAcc),
	.LoadAcc(LoadAcc),
	.MDR0(MDR0),
	.MDR1(MDR1),
	.MDR2(MDR2),
	.MDR3(MDR3),
	.sampler_tx(sampler)
);

Accumulator_vlg_check_tst tb_out(
	.ACout0(ACout0),
	.ACout1(ACout1),
	.Acout2(Acout2),
	.Acout3(Acout3),
	.sampler_rx(sampler)
);
endmodule

