// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/09/2014 00:13:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    accControl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module accControl_vlg_sample_tst(
	A,
	B,
	C,
	CLK,
	CLR,
	D,
	sampler_tx
);
input  A;
input  B;
input  C;
input  CLK;
input  CLR;
input  D;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or CLK or CLR or D)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module accControl_vlg_check_tst (
	C0,
	C2,
	C3,
	C4,
	C7,
	C8,
	C9,
	C42,
	sampler_rx
);
input  C0;
input  C2;
input  C3;
input  C4;
input  C7;
input  C8;
input  C9;
input  C42;
input sampler_rx;

reg  C0_expected;
reg  C2_expected;
reg  C3_expected;
reg  C4_expected;
reg  C7_expected;
reg  C8_expected;
reg  C9_expected;
reg  C42_expected;

reg  C0_prev;
reg  C2_prev;
reg  C3_prev;
reg  C4_prev;
reg  C7_prev;
reg  C8_prev;
reg  C9_prev;
reg  C42_prev;

reg  C0_expected_prev;
reg  C2_expected_prev;
reg  C3_expected_prev;
reg  C4_expected_prev;
reg  C7_expected_prev;
reg  C8_expected_prev;
reg  C9_expected_prev;
reg  C42_expected_prev;

reg  last_C0_exp;
reg  last_C2_exp;
reg  last_C3_exp;
reg  last_C4_exp;
reg  last_C7_exp;
reg  last_C8_exp;
reg  last_C9_exp;
reg  last_C42_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	C0_prev = C0;
	C2_prev = C2;
	C3_prev = C3;
	C4_prev = C4;
	C7_prev = C7;
	C8_prev = C8;
	C9_prev = C9;
	C42_prev = C42;
end

// update expected /o prevs

always @(trigger)
begin
	C0_expected_prev = C0_expected;
	C2_expected_prev = C2_expected;
	C3_expected_prev = C3_expected;
	C4_expected_prev = C4_expected;
	C7_expected_prev = C7_expected;
	C8_expected_prev = C8_expected;
	C9_expected_prev = C9_expected;
	C42_expected_prev = C42_expected;
end



// expected C0
initial
begin
	C0_expected = 1'bX;
end 

// expected C2
initial
begin
	C2_expected = 1'bX;
end 

// expected C3
initial
begin
	C3_expected = 1'bX;
end 

// expected C4
initial
begin
	C4_expected = 1'bX;
end 

// expected C7
initial
begin
	C7_expected = 1'bX;
end 

// expected C8
initial
begin
	C8_expected = 1'bX;
end 

// expected C9
initial
begin
	C9_expected = 1'bX;
end 

// expected C42
initial
begin
	C42_expected = 1'bX;
end 
// generate trigger
always @(C0_expected or C0 or C2_expected or C2 or C3_expected or C3 or C4_expected or C4 or C7_expected or C7 or C8_expected or C8 or C9_expected or C9 or C42_expected or C42)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C0 = %b | expected C2 = %b | expected C3 = %b | expected C4 = %b | expected C7 = %b | expected C8 = %b | expected C9 = %b | expected C42 = %b | ",C0_expected_prev,C2_expected_prev,C3_expected_prev,C4_expected_prev,C7_expected_prev,C8_expected_prev,C9_expected_prev,C42_expected_prev);
	$display("| real C0 = %b | real C2 = %b | real C3 = %b | real C4 = %b | real C7 = %b | real C8 = %b | real C9 = %b | real C42 = %b | ",C0_prev,C2_prev,C3_prev,C4_prev,C7_prev,C8_prev,C9_prev,C42_prev);
`endif
	if (
		( C0_expected_prev !== 1'bx ) && ( C0_prev !== C0_expected_prev )
		&& ((C0_expected_prev !== last_C0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C0_expected_prev);
		$display ("     Real value = %b", C0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C0_exp = C0_expected_prev;
	end
	if (
		( C2_expected_prev !== 1'bx ) && ( C2_prev !== C2_expected_prev )
		&& ((C2_expected_prev !== last_C2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2_expected_prev);
		$display ("     Real value = %b", C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_C2_exp = C2_expected_prev;
	end
	if (
		( C3_expected_prev !== 1'bx ) && ( C3_prev !== C3_expected_prev )
		&& ((C3_expected_prev !== last_C3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C3_expected_prev);
		$display ("     Real value = %b", C3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C3_exp = C3_expected_prev;
	end
	if (
		( C4_expected_prev !== 1'bx ) && ( C4_prev !== C4_expected_prev )
		&& ((C4_expected_prev !== last_C4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C4_expected_prev);
		$display ("     Real value = %b", C4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_C4_exp = C4_expected_prev;
	end
	if (
		( C7_expected_prev !== 1'bx ) && ( C7_prev !== C7_expected_prev )
		&& ((C7_expected_prev !== last_C7_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C7_expected_prev);
		$display ("     Real value = %b", C7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_C7_exp = C7_expected_prev;
	end
	if (
		( C8_expected_prev !== 1'bx ) && ( C8_prev !== C8_expected_prev )
		&& ((C8_expected_prev !== last_C8_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C8_expected_prev);
		$display ("     Real value = %b", C8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_C8_exp = C8_expected_prev;
	end
	if (
		( C9_expected_prev !== 1'bx ) && ( C9_prev !== C9_expected_prev )
		&& ((C9_expected_prev !== last_C9_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C9_expected_prev);
		$display ("     Real value = %b", C9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_C9_exp = C9_expected_prev;
	end
	if (
		( C42_expected_prev !== 1'bx ) && ( C42_prev !== C42_expected_prev )
		&& ((C42_expected_prev !== last_C42_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C42 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C42_expected_prev);
		$display ("     Real value = %b", C42_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_C42_exp = C42_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module accControl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg CLK;
reg CLR;
reg D;
// wires                                               
wire C0;
wire C2;
wire C3;
wire C4;
wire C7;
wire C8;
wire C9;
wire C42;

wire sampler;                             

// assign statements (if any)                          
accControl i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.C0(C0),
	.C2(C2),
	.C3(C3),
	.C4(C4),
	.C7(C7),
	.C8(C8),
	.C9(C9),
	.C42(C42),
	.CLK(CLK),
	.CLR(CLR),
	.D(D)
);

// A
initial
begin
	A = 1'b0;
end 

// B
initial
begin
	B = 1'b0;
	B = #40000 1'b1;
	B = #460000 1'b0;
	B = #20000 1'b1;
	B = #460000 1'b0;
end 

// C
initial
begin
	C = 1'b0;
	C = #40000 1'b1;
	C = #460000 1'b0;
	C = #20000 1'b1;
	C = #460000 1'b0;
end 

// D
initial
begin
	D = 1'b0;
	D = #500000 1'b1;
	D = #480000 1'b0;
end 

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #60000 1'b1;
	CLK = #40000 1'b0;
	CLK = #40000 1'b1;
	CLK = #40000 1'b0;
	CLK = #40000 1'b1;
	CLK = #40000 1'b0;
	CLK = #40000 1'b1;
	CLK = #40000 1'b0;
	CLK = #40000 1'b1;
	CLK = #40000 1'b0;
	CLK = #40000 1'b1;
	CLK = #40000 1'b0;
	CLK = #40000 1'b1;
	CLK = #40000 1'b0;
	CLK = #40000 1'b1;
	CLK = #40000 1'b0;
	CLK = #40000 1'b1;
	CLK = #40000 1'b0;
	CLK = #40000 1'b1;
	CLK = #40000 1'b0;
	CLK = #40000 1'b1;
	CLK = #40000 1'b0;
	CLK = #40000 1'b1;
	CLK = #40000 1'b0;
end 

// CLR
initial
begin
	CLR = 1'b1;
	CLR = #40000 1'b0;
	CLR = #460000 1'b1;
	CLR = #20000 1'b0;
end 

accControl_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.CLK(CLK),
	.CLR(CLR),
	.D(D),
	.sampler_tx(sampler)
);

accControl_vlg_check_tst tb_out(
	.C0(C0),
	.C2(C2),
	.C3(C3),
	.C4(C4),
	.C7(C7),
	.C8(C8),
	.C9(C9),
	.C42(C42),
	.sampler_rx(sampler)
);
endmodule

