// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2014 15:21:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    accTest
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module accTest_vlg_sample_tst(
	ADDR0,
	ADDR1,
	ADDR2,
	ADDR3,
	ALU0,
	ALU1,
	ALU2,
	ALU3,
	ALUMDRsel,
	ClearACC,
	IncACC,
	LoadACC,
	sampler_tx
);
input  ADDR0;
input  ADDR1;
input  ADDR2;
input  ADDR3;
input  ALU0;
input  ALU1;
input  ALU2;
input  ALU3;
input  ALUMDRsel;
input  ClearACC;
input  IncACC;
input  LoadACC;
output sampler_tx;

reg sample;
time current_time;
always @(ADDR0 or ADDR1 or ADDR2 or ADDR3 or ALU0 or ALU1 or ALU2 or ALU3 or ALUMDRsel or ClearACC or IncACC or LoadACC)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module accTest_vlg_check_tst (
	Aout0,
	Aout1,
	Aout2,
	Aout3,
	sampler_rx
);
input  Aout0;
input  Aout1;
input  Aout2;
input  Aout3;
input sampler_rx;

reg  Aout0_expected;
reg  Aout1_expected;
reg  Aout2_expected;
reg  Aout3_expected;

reg  Aout0_prev;
reg  Aout1_prev;
reg  Aout2_prev;
reg  Aout3_prev;

reg  Aout0_expected_prev;
reg  Aout1_expected_prev;
reg  Aout2_expected_prev;
reg  Aout3_expected_prev;

reg  last_Aout0_exp;
reg  last_Aout1_exp;
reg  last_Aout2_exp;
reg  last_Aout3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Aout0_prev = Aout0;
	Aout1_prev = Aout1;
	Aout2_prev = Aout2;
	Aout3_prev = Aout3;
end

// update expected /o prevs

always @(trigger)
begin
	Aout0_expected_prev = Aout0_expected;
	Aout1_expected_prev = Aout1_expected;
	Aout2_expected_prev = Aout2_expected;
	Aout3_expected_prev = Aout3_expected;
end



// expected Aout0
initial
begin
	Aout0_expected = 1'bX;
end 

// expected Aout1
initial
begin
	Aout1_expected = 1'bX;
end 

// expected Aout2
initial
begin
	Aout2_expected = 1'bX;
end 

// expected Aout3
initial
begin
	Aout3_expected = 1'bX;
end 
// generate trigger
always @(Aout0_expected or Aout0 or Aout1_expected or Aout1 or Aout2_expected or Aout2 or Aout3_expected or Aout3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Aout0 = %b | expected Aout1 = %b | expected Aout2 = %b | expected Aout3 = %b | ",Aout0_expected_prev,Aout1_expected_prev,Aout2_expected_prev,Aout3_expected_prev);
	$display("| real Aout0 = %b | real Aout1 = %b | real Aout2 = %b | real Aout3 = %b | ",Aout0_prev,Aout1_prev,Aout2_prev,Aout3_prev);
`endif
	if (
		( Aout0_expected_prev !== 1'bx ) && ( Aout0_prev !== Aout0_expected_prev )
		&& ((Aout0_expected_prev !== last_Aout0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout0_expected_prev);
		$display ("     Real value = %b", Aout0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout0_exp = Aout0_expected_prev;
	end
	if (
		( Aout1_expected_prev !== 1'bx ) && ( Aout1_prev !== Aout1_expected_prev )
		&& ((Aout1_expected_prev !== last_Aout1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout1_expected_prev);
		$display ("     Real value = %b", Aout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Aout1_exp = Aout1_expected_prev;
	end
	if (
		( Aout2_expected_prev !== 1'bx ) && ( Aout2_prev !== Aout2_expected_prev )
		&& ((Aout2_expected_prev !== last_Aout2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout2_expected_prev);
		$display ("     Real value = %b", Aout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Aout2_exp = Aout2_expected_prev;
	end
	if (
		( Aout3_expected_prev !== 1'bx ) && ( Aout3_prev !== Aout3_expected_prev )
		&& ((Aout3_expected_prev !== last_Aout3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout3_expected_prev);
		$display ("     Real value = %b", Aout3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Aout3_exp = Aout3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module accTest_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ADDR0;
reg ADDR1;
reg ADDR2;
reg ADDR3;
reg ALU0;
reg ALU1;
reg ALU2;
reg ALU3;
reg ALUMDRsel;
reg ClearACC;
reg IncACC;
reg LoadACC;
// wires                                               
wire Aout0;
wire Aout1;
wire Aout2;
wire Aout3;

wire sampler;                             

// assign statements (if any)                          
accTest i1 (
// port map - connection between master ports and signals/registers   
	.ADDR0(ADDR0),
	.ADDR1(ADDR1),
	.ADDR2(ADDR2),
	.ADDR3(ADDR3),
	.ALU0(ALU0),
	.ALU1(ALU1),
	.ALU2(ALU2),
	.ALU3(ALU3),
	.ALUMDRsel(ALUMDRsel),
	.Aout0(Aout0),
	.Aout1(Aout1),
	.Aout2(Aout2),
	.Aout3(Aout3),
	.ClearACC(ClearACC),
	.IncACC(IncACC),
	.LoadACC(LoadACC)
);

// ADDR0
initial
begin
	ADDR0 = 1'b1;
	ADDR0 = #880000 1'b0;
end 

// ADDR1
initial
begin
	ADDR1 = 1'b1;
	ADDR1 = #880000 1'b0;
end 

// ADDR2
initial
begin
	ADDR2 = 1'b1;
	ADDR2 = #880000 1'b0;
end 

// ADDR3
initial
begin
	ADDR3 = 1'b0;
end 

// ALU0
initial
begin
	ALU0 = 1'b1;
	ALU0 = #1040000 1'b0;
end 

// ALU1
initial
begin
	ALU1 = 1'b0;
end 

// ALU2
initial
begin
	ALU2 = 1'b1;
	ALU2 = #1040000 1'b0;
end 

// ALU3
initial
begin
	ALU3 = 1'b0;
end 

// ALUMDRsel
initial
begin
	ALUMDRsel = 1'b0;
	ALUMDRsel = #220000 1'b1;
	ALUMDRsel = #240000 1'b0;
end 

// IncACC
initial
begin
	IncACC = 1'b1;
	IncACC = #500000 1'b0;
	IncACC = #40000 1'b1;
	IncACC = #40000 1'b0;
	IncACC = #40000 1'b1;
end 

// ClearACC
initial
begin
	ClearACC = 1'b0;
	ClearACC = #680000 1'b1;
	ClearACC = #40000 1'b0;
end 

// LoadACC
initial
begin
	LoadACC = 1'b0;
	LoadACC = #20000 1'b1;
	LoadACC = #40000 1'b0;
	LoadACC = #200000 1'b1;
	LoadACC = #40000 1'b0;
end 

accTest_vlg_sample_tst tb_sample (
	.ADDR0(ADDR0),
	.ADDR1(ADDR1),
	.ADDR2(ADDR2),
	.ADDR3(ADDR3),
	.ALU0(ALU0),
	.ALU1(ALU1),
	.ALU2(ALU2),
	.ALU3(ALU3),
	.ALUMDRsel(ALUMDRsel),
	.ClearACC(ClearACC),
	.IncACC(IncACC),
	.LoadACC(LoadACC),
	.sampler_tx(sampler)
);

accTest_vlg_check_tst tb_out(
	.Aout0(Aout0),
	.Aout1(Aout1),
	.Aout2(Aout2),
	.Aout3(Aout3),
	.sampler_rx(sampler)
);
endmodule

