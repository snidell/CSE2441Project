// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/10/2014 00:59:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FlagRegister
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FlagRegister_vlg_sample_tst(
	A,
	B,
	C,
	Clear,
	D,
	Load,
	sampler_tx
);
input  A;
input  B;
input  C;
input  Clear;
input  D;
input  Load;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or Clear or D or Load)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FlagRegister_vlg_check_tst (
	QA,
	QB,
	QC,
	QD,
	sampler_rx
);
input  QA;
input  QB;
input  QC;
input  QD;
input sampler_rx;

reg  QA_expected;
reg  QB_expected;
reg  QC_expected;
reg  QD_expected;

reg  QA_prev;
reg  QB_prev;
reg  QC_prev;
reg  QD_prev;

reg  QA_expected_prev;
reg  QB_expected_prev;
reg  QC_expected_prev;
reg  QD_expected_prev;

reg  last_QA_exp;
reg  last_QB_exp;
reg  last_QC_exp;
reg  last_QD_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	QA_prev = QA;
	QB_prev = QB;
	QC_prev = QC;
	QD_prev = QD;
end

// update expected /o prevs

always @(trigger)
begin
	QA_expected_prev = QA_expected;
	QB_expected_prev = QB_expected;
	QC_expected_prev = QC_expected;
	QD_expected_prev = QD_expected;
end



// expected QA
initial
begin
	QA_expected = 1'bX;
end 

// expected QB
initial
begin
	QB_expected = 1'bX;
end 

// expected QC
initial
begin
	QC_expected = 1'bX;
end 

// expected QD
initial
begin
	QD_expected = 1'bX;
end 
// generate trigger
always @(QA_expected or QA or QB_expected or QB or QC_expected or QC or QD_expected or QD)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected QA = %b | expected QB = %b | expected QC = %b | expected QD = %b | ",QA_expected_prev,QB_expected_prev,QC_expected_prev,QD_expected_prev);
	$display("| real QA = %b | real QB = %b | real QC = %b | real QD = %b | ",QA_prev,QB_prev,QC_prev,QD_prev);
`endif
	if (
		( QA_expected_prev !== 1'bx ) && ( QA_prev !== QA_expected_prev )
		&& ((QA_expected_prev !== last_QA_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QA_expected_prev);
		$display ("     Real value = %b", QA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_QA_exp = QA_expected_prev;
	end
	if (
		( QB_expected_prev !== 1'bx ) && ( QB_prev !== QB_expected_prev )
		&& ((QB_expected_prev !== last_QB_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QB_expected_prev);
		$display ("     Real value = %b", QB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_QB_exp = QB_expected_prev;
	end
	if (
		( QC_expected_prev !== 1'bx ) && ( QC_prev !== QC_expected_prev )
		&& ((QC_expected_prev !== last_QC_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QC_expected_prev);
		$display ("     Real value = %b", QC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_QC_exp = QC_expected_prev;
	end
	if (
		( QD_expected_prev !== 1'bx ) && ( QD_prev !== QD_expected_prev )
		&& ((QD_expected_prev !== last_QD_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QD_expected_prev);
		$display ("     Real value = %b", QD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_QD_exp = QD_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FlagRegister_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg Clear;
reg D;
reg Load;
// wires                                               
wire QA;
wire QB;
wire QC;
wire QD;

wire sampler;                             

// assign statements (if any)                          
FlagRegister i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.Clear(Clear),
	.D(D),
	.Load(Load),
	.QA(QA),
	.QB(QB),
	.QC(QC),
	.QD(QD)
);

// A
initial
begin
	A = 1'bX;
	A = #60000 1'b0;
	A = #100000 1'b1;
	A = #40000 1'b0;
	A = #40000 1'b1;
	A = #40000 1'b0;
end 

// B
initial
begin
	B = 1'bX;
	B = #60000 1'b0;
	B = #20000 1'b1;
	B = #40000 1'b0;
	B = #120000 1'b1;
	B = #40000 1'b0;
	B = #700000 1'b1;
end 

// C
initial
begin
	C = 1'bX;
	C = #60000 1'b0;
	C = #100000 1'b1;
	C = #40000 1'b0;
	C = #40000 1'b1;
	C = #40000 1'b0;
end 

// D
initial
begin
	D = 1'bX;
	D = #60000 1'b0;
	D = #20000 1'b1;
	D = #40000 1'b0;
	D = #120000 1'b1;
	D = #40000 1'b0;
	D = #700000 1'b1;
end 

// Clear
initial
begin
	Clear = 1'b0;
	Clear = #80000 1'b1;
	Clear = #840000 1'b0;
end 

// Load
initial
begin
	Load = 1'b0;
	Load = #100000 1'b1;
	Load = #40000 1'b0;
	Load = #40000 1'b1;
	Load = #40000 1'b0;
	Load = #40000 1'b1;
	Load = #40000 1'b0;
	Load = #40000 1'b1;
	Load = #40000 1'b0;
end 

FlagRegister_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.Clear(Clear),
	.D(D),
	.Load(Load),
	.sampler_tx(sampler)
);

FlagRegister_vlg_check_tst tb_out(
	.QA(QA),
	.QB(QB),
	.QC(QC),
	.QD(QD),
	.sampler_rx(sampler)
);
endmodule

