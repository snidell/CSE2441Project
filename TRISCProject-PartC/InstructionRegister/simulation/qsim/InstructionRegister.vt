// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/30/2014 04:00:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    InstructionRegister
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module InstructionRegister_vlg_sample_tst(
	Clear,
	IR0,
	IR1,
	IR2,
	IR3,
	Load,
	sampler_tx
);
input  Clear;
input  IR0;
input  IR1;
input  IR2;
input  IR3;
input  Load;
output sampler_tx;

reg sample;
time current_time;
always @(Clear or IR0 or IR1 or IR2 or IR3 or Load)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module InstructionRegister_vlg_check_tst (
	IRout0,
	IRout1,
	IRout2,
	IRout3,
	sampler_rx
);
input  IRout0;
input  IRout1;
input  IRout2;
input  IRout3;
input sampler_rx;

reg  IRout0_expected;
reg  IRout1_expected;
reg  IRout2_expected;
reg  IRout3_expected;

reg  IRout0_prev;
reg  IRout1_prev;
reg  IRout2_prev;
reg  IRout3_prev;

reg  IRout0_expected_prev;
reg  IRout1_expected_prev;
reg  IRout2_expected_prev;
reg  IRout3_expected_prev;

reg  last_IRout0_exp;
reg  last_IRout1_exp;
reg  last_IRout2_exp;
reg  last_IRout3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	IRout0_prev = IRout0;
	IRout1_prev = IRout1;
	IRout2_prev = IRout2;
	IRout3_prev = IRout3;
end

// update expected /o prevs

always @(trigger)
begin
	IRout0_expected_prev = IRout0_expected;
	IRout1_expected_prev = IRout1_expected;
	IRout2_expected_prev = IRout2_expected;
	IRout3_expected_prev = IRout3_expected;
end



// expected IRout0
initial
begin
	IRout0_expected = 1'bX;
end 

// expected IRout1
initial
begin
	IRout1_expected = 1'bX;
end 

// expected IRout2
initial
begin
	IRout2_expected = 1'bX;
end 

// expected IRout3
initial
begin
	IRout3_expected = 1'bX;
end 
// generate trigger
always @(IRout0_expected or IRout0 or IRout1_expected or IRout1 or IRout2_expected or IRout2 or IRout3_expected or IRout3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected IRout0 = %b | expected IRout1 = %b | expected IRout2 = %b | expected IRout3 = %b | ",IRout0_expected_prev,IRout1_expected_prev,IRout2_expected_prev,IRout3_expected_prev);
	$display("| real IRout0 = %b | real IRout1 = %b | real IRout2 = %b | real IRout3 = %b | ",IRout0_prev,IRout1_prev,IRout2_prev,IRout3_prev);
`endif
	if (
		( IRout0_expected_prev !== 1'bx ) && ( IRout0_prev !== IRout0_expected_prev )
		&& ((IRout0_expected_prev !== last_IRout0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IRout0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IRout0_expected_prev);
		$display ("     Real value = %b", IRout0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IRout0_exp = IRout0_expected_prev;
	end
	if (
		( IRout1_expected_prev !== 1'bx ) && ( IRout1_prev !== IRout1_expected_prev )
		&& ((IRout1_expected_prev !== last_IRout1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IRout1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IRout1_expected_prev);
		$display ("     Real value = %b", IRout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IRout1_exp = IRout1_expected_prev;
	end
	if (
		( IRout2_expected_prev !== 1'bx ) && ( IRout2_prev !== IRout2_expected_prev )
		&& ((IRout2_expected_prev !== last_IRout2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IRout2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IRout2_expected_prev);
		$display ("     Real value = %b", IRout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IRout2_exp = IRout2_expected_prev;
	end
	if (
		( IRout3_expected_prev !== 1'bx ) && ( IRout3_prev !== IRout3_expected_prev )
		&& ((IRout3_expected_prev !== last_IRout3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IRout3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IRout3_expected_prev);
		$display ("     Real value = %b", IRout3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IRout3_exp = IRout3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module InstructionRegister_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clear;
reg IR0;
reg IR1;
reg IR2;
reg IR3;
reg Load;
// wires                                               
wire IRout0;
wire IRout1;
wire IRout2;
wire IRout3;

wire sampler;                             

// assign statements (if any)                          
InstructionRegister i1 (
// port map - connection between master ports and signals/registers   
	.Clear(Clear),
	.IR0(IR0),
	.IR1(IR1),
	.IR2(IR2),
	.IR3(IR3),
	.IRout0(IRout0),
	.IRout1(IRout1),
	.IRout2(IRout2),
	.IRout3(IRout3),
	.Load(Load)
);

// Clear
initial
begin
	Clear = 1'b0;
	Clear = #40000 1'b1;
	Clear = #40000 1'b0;
	Clear = #40000 1'b1;
	Clear = #40000 1'b0;
end 

// IR0
initial
begin
	IR0 = 1'b0;
	IR0 = #20000 1'b1;
	IR0 = #40000 1'b0;
	IR0 = #40000 1'b1;
	IR0 = #40000 1'b0;
end 

// IR1
initial
begin
	IR1 = 1'b0;
	IR1 = #20000 1'b1;
	IR1 = #40000 1'b0;
	IR1 = #40000 1'b1;
	IR1 = #40000 1'b0;
end 

// IR2
initial
begin
	IR2 = 1'b0;
	IR2 = #20000 1'b1;
	IR2 = #40000 1'b0;
	IR2 = #40000 1'b1;
	IR2 = #40000 1'b0;
end 

// IR3
initial
begin
	IR3 = 1'b0;
	IR3 = #20000 1'b1;
	IR3 = #40000 1'b0;
end 

// Load
initial
begin
	Load = 1'b0;
	Load = #40000 1'b1;
	Load = #160000 1'b0;
end 

InstructionRegister_vlg_sample_tst tb_sample (
	.Clear(Clear),
	.IR0(IR0),
	.IR1(IR1),
	.IR2(IR2),
	.IR3(IR3),
	.Load(Load),
	.sampler_tx(sampler)
);

InstructionRegister_vlg_check_tst tb_out(
	.IRout0(IRout0),
	.IRout1(IRout1),
	.IRout2(IRout2),
	.IRout3(IRout3),
	.sampler_rx(sampler)
);
endmodule

