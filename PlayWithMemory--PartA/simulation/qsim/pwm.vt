// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/02/2014 17:42:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    pwm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pwm_vlg_sample_tst(
	address0,
	address1,
	address2,
	address3,
	C4,
	C42,
	CLK,
	data,
	WriteEn,
	sampler_tx
);
input  address0;
input  address1;
input  address2;
input  address3;
input  C4;
input  C42;
input  CLK;
input [7:0] data;
input  WriteEn;
output sampler_tx;

reg sample;
time current_time;
always @(address0 or address1 or address2 or address3 or C4 or C42 or CLK or data or WriteEn)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module pwm_vlg_check_tst (
	Q0,
	Q1,
	Q2,
	Q3,
	Q4,
	Q5,
	Q6,
	Q7,
	WRENSig,
	sampler_rx
);
input  Q0;
input  Q1;
input  Q2;
input  Q3;
input  Q4;
input  Q5;
input  Q6;
input  Q7;
input  WRENSig;
input sampler_rx;

reg  Q0_expected;
reg  Q1_expected;
reg  Q2_expected;
reg  Q3_expected;
reg  Q4_expected;
reg  Q5_expected;
reg  Q6_expected;
reg  Q7_expected;
reg  WRENSig_expected;

reg  Q0_prev;
reg  Q1_prev;
reg  Q2_prev;
reg  Q3_prev;
reg  Q4_prev;
reg  Q5_prev;
reg  Q6_prev;
reg  Q7_prev;
reg  WRENSig_prev;

reg  Q0_expected_prev;
reg  Q1_expected_prev;
reg  Q2_expected_prev;
reg  Q3_expected_prev;
reg  Q4_expected_prev;
reg  Q5_expected_prev;
reg  Q6_expected_prev;
reg  Q7_expected_prev;
reg  WRENSig_expected_prev;

reg  last_Q0_exp;
reg  last_Q1_exp;
reg  last_Q2_exp;
reg  last_Q3_exp;
reg  last_Q4_exp;
reg  last_Q5_exp;
reg  last_Q6_exp;
reg  last_Q7_exp;
reg  last_WRENSig_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	Q0_prev = Q0;
	Q1_prev = Q1;
	Q2_prev = Q2;
	Q3_prev = Q3;
	Q4_prev = Q4;
	Q5_prev = Q5;
	Q6_prev = Q6;
	Q7_prev = Q7;
	WRENSig_prev = WRENSig;
end

// update expected /o prevs

always @(trigger)
begin
	Q0_expected_prev = Q0_expected;
	Q1_expected_prev = Q1_expected;
	Q2_expected_prev = Q2_expected;
	Q3_expected_prev = Q3_expected;
	Q4_expected_prev = Q4_expected;
	Q5_expected_prev = Q5_expected;
	Q6_expected_prev = Q6_expected;
	Q7_expected_prev = Q7_expected;
	WRENSig_expected_prev = WRENSig_expected;
end



// expected Q0
initial
begin
	Q0_expected = 1'bX;
end 

// expected Q1
initial
begin
	Q1_expected = 1'bX;
end 

// expected Q2
initial
begin
	Q2_expected = 1'bX;
end 

// expected Q3
initial
begin
	Q3_expected = 1'bX;
end 

// expected Q4
initial
begin
	Q4_expected = 1'bX;
end 

// expected Q5
initial
begin
	Q5_expected = 1'bX;
end 

// expected Q6
initial
begin
	Q6_expected = 1'bX;
end 

// expected Q7
initial
begin
	Q7_expected = 1'bX;
end 

// expected WRENSig
initial
begin
	WRENSig_expected = 1'bX;
end 
// generate trigger
always @(Q0_expected or Q0 or Q1_expected or Q1 or Q2_expected or Q2 or Q3_expected or Q3 or Q4_expected or Q4 or Q5_expected or Q5 or Q6_expected or Q6 or Q7_expected or Q7 or WRENSig_expected or WRENSig)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Q0 = %b | expected Q1 = %b | expected Q2 = %b | expected Q3 = %b | expected Q4 = %b | expected Q5 = %b | expected Q6 = %b | expected Q7 = %b | expected WRENSig = %b | ",Q0_expected_prev,Q1_expected_prev,Q2_expected_prev,Q3_expected_prev,Q4_expected_prev,Q5_expected_prev,Q6_expected_prev,Q7_expected_prev,WRENSig_expected_prev);
	$display("| real Q0 = %b | real Q1 = %b | real Q2 = %b | real Q3 = %b | real Q4 = %b | real Q5 = %b | real Q6 = %b | real Q7 = %b | real WRENSig = %b | ",Q0_prev,Q1_prev,Q2_prev,Q3_prev,Q4_prev,Q5_prev,Q6_prev,Q7_prev,WRENSig_prev);
`endif
	if (
		( Q0_expected_prev !== 1'bx ) && ( Q0_prev !== Q0_expected_prev )
		&& ((Q0_expected_prev !== last_Q0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q0_exp = Q0_expected_prev;
	end
	if (
		( Q1_expected_prev !== 1'bx ) && ( Q1_prev !== Q1_expected_prev )
		&& ((Q1_expected_prev !== last_Q1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q1_exp = Q1_expected_prev;
	end
	if (
		( Q2_expected_prev !== 1'bx ) && ( Q2_prev !== Q2_expected_prev )
		&& ((Q2_expected_prev !== last_Q2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q2_exp = Q2_expected_prev;
	end
	if (
		( Q3_expected_prev !== 1'bx ) && ( Q3_prev !== Q3_expected_prev )
		&& ((Q3_expected_prev !== last_Q3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q3_exp = Q3_expected_prev;
	end
	if (
		( Q4_expected_prev !== 1'bx ) && ( Q4_prev !== Q4_expected_prev )
		&& ((Q4_expected_prev !== last_Q4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q4_exp = Q4_expected_prev;
	end
	if (
		( Q5_expected_prev !== 1'bx ) && ( Q5_prev !== Q5_expected_prev )
		&& ((Q5_expected_prev !== last_Q5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q5_expected_prev);
		$display ("     Real value = %b", Q5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q5_exp = Q5_expected_prev;
	end
	if (
		( Q6_expected_prev !== 1'bx ) && ( Q6_prev !== Q6_expected_prev )
		&& ((Q6_expected_prev !== last_Q6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q6_expected_prev);
		$display ("     Real value = %b", Q6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q6_exp = Q6_expected_prev;
	end
	if (
		( Q7_expected_prev !== 1'bx ) && ( Q7_prev !== Q7_expected_prev )
		&& ((Q7_expected_prev !== last_Q7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q7_expected_prev);
		$display ("     Real value = %b", Q7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Q7_exp = Q7_expected_prev;
	end
	if (
		( WRENSig_expected_prev !== 1'bx ) && ( WRENSig_prev !== WRENSig_expected_prev )
		&& ((WRENSig_expected_prev !== last_WRENSig_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WRENSig :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WRENSig_expected_prev);
		$display ("     Real value = %b", WRENSig_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_WRENSig_exp = WRENSig_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module pwm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg address0;
reg address1;
reg address2;
reg address3;
reg C4;
reg C42;
reg CLK;
reg [7:0] data;
reg WriteEn;
// wires                                               
wire Q0;
wire Q1;
wire Q2;
wire Q3;
wire Q4;
wire Q5;
wire Q6;
wire Q7;
wire WRENSig;

wire sampler;                             

// assign statements (if any)                          
pwm i1 (
// port map - connection between master ports and signals/registers   
	.address0(address0),
	.address1(address1),
	.address2(address2),
	.address3(address3),
	.C4(C4),
	.C42(C42),
	.CLK(CLK),
	.data(data),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.Q4(Q4),
	.Q5(Q5),
	.Q6(Q6),
	.Q7(Q7),
	.WRENSig(WRENSig),
	.WriteEn(WriteEn)
);

// address0
initial
begin
	address0 = 1'b0;
	address0 = #40000 1'b1;
	address0 = #40000 1'b0;
	address0 = #40000 1'b1;
	address0 = #40000 1'b0;
	address0 = #40000 1'b1;
	address0 = #40000 1'b0;
	address0 = #40000 1'b1;
	address0 = #40000 1'b0;
	address0 = #40000 1'b1;
	address0 = #40000 1'b0;
	address0 = #40000 1'b1;
	address0 = #40000 1'b0;
	address0 = #40000 1'b1;
	address0 = #40000 1'b0;
	address0 = #40000 1'b1;
	address0 = #40000 1'b0;
end 

// address1
initial
begin
	address1 = 1'b0;
	address1 = #80000 1'b1;
	address1 = #80000 1'b0;
	address1 = #80000 1'b1;
	address1 = #80000 1'b0;
	address1 = #80000 1'b1;
	address1 = #80000 1'b0;
	address1 = #80000 1'b1;
	address1 = #80000 1'b0;
end 

// address2
initial
begin
	address2 = 1'b0;
	address2 = #160000 1'b1;
	address2 = #160000 1'b0;
	address2 = #160000 1'b1;
	address2 = #160000 1'b0;
end 

// address3
initial
begin
	address3 = 1'b0;
	address3 = #320000 1'b1;
	address3 = #320000 1'b0;
end 

// C4
initial
begin
	C4 = 1'b0;
end 

// C42
initial
begin
	C42 = 1'b1;
	C42 = #20000 1'b0;
	C42 = #20000 1'b1;
	C42 = #20000 1'b0;
	C42 = #20000 1'b1;
	C42 = #20000 1'b0;
	C42 = #20000 1'b1;
	C42 = #20000 1'b0;
	C42 = #20000 1'b1;
	C42 = #20000 1'b0;
	C42 = #20000 1'b1;
	C42 = #20000 1'b0;
	C42 = #20000 1'b1;
	C42 = #20000 1'b0;
	C42 = #20000 1'b1;
	C42 = #20000 1'b0;
	C42 = #20000 1'b1;
	C42 = #20000 1'b0;
	C42 = #20000 1'b1;
	C42 = #20000 1'b0;
	C42 = #20000 1'b1;
	C42 = #20000 1'b0;
	C42 = #20000 1'b1;
	C42 = #20000 1'b0;
	C42 = #20000 1'b1;
	C42 = #20000 1'b0;
	C42 = #20000 1'b1;
	C42 = #20000 1'b0;
	C42 = #20000 1'b1;
	C42 = #20000 1'b0;
	C42 = #20000 1'b1;
	C42 = #20000 1'b0;
end 

// CLK
initial
begin
	CLK = 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b0;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b0;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
end 

// WriteEn
initial
begin
	WriteEn = 1'b0;
end 

pwm_vlg_sample_tst tb_sample (
	.address0(address0),
	.address1(address1),
	.address2(address2),
	.address3(address3),
	.C4(C4),
	.C42(C42),
	.CLK(CLK),
	.data(data),
	.WriteEn(WriteEn),
	.sampler_tx(sampler)
);

pwm_vlg_check_tst tb_out(
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.Q4(Q4),
	.Q5(Q5),
	.Q6(Q6),
	.Q7(Q7),
	.WRENSig(WRENSig),
	.sampler_rx(sampler)
);
endmodule

